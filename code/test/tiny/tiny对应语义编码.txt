S' -> program :\{ 0: -1 \}
program -> stmt-sequence :\{ 0: -1 \}
stmt-sequence -> stmt-sequence ; statement :\{ 0: 1, 1: 0, 2: 1 \}
stmt-sequence -> statement :\{ 0: -1 \}
statement -> if-stmt :\{0:-1\}
statement -> repeat-stmt :\{0:-1\}
statement -> assign-stmt :\{0:-1\}
statement -> read-stmt :\{0:-1\}
statement -> write-stmt :\{0:-1\}
if-stmt -> if exp then stmt-sequence end :\{0:-1, 1:1, 3:1\}
if-stmt -> if exp then stmt-sequence else stmt-sequence end :\{0:-1, 1:1, 3:1, 5:1\} 
repeat-stmt -> repeat stmt-sequence until exp :\{0:-1,1:1, 3:1 \}
assign-stmt -> identifier := exp :\{0:1, 1:-1, 2:1\}
read-stmt -> read identifier :\{0:-1, 1:1\}
write-stmt -> write exp :\{0:-1, 1:1\}
exp -> simple-exp comparison-op simple-exp :\{0:1, 1:-1, 2:1\} 
exp -> simple-exp :\{0:-1\}
comparison-op -> < :\{0:-1\}
comparison-op -> > :\{0:-1\}
comparison-op -> = :\{0:-1\}
comparison-op -> <= :\{0:-1\}
comparison-op -> <> :\{0:-1\}
comparison-op -> >= :\{0:-1\}
simple-exp -> simple-exp addop term :\{0:1, 1:-1, 2:1\}
simple-exp -> term :\{0:-1\}
addop -> + :\{0:-1\}
addop -> - :\{0:-1\}
term -> term mulop factor :\{0:1, 1:-1, 2:1\}
term -> factor :\{0:-1\}
mulop -> * :\{0:-1\}
mulop -> / :\{0:-1\}
mulop -> % :\{0:-1\}
mulop -> ^ :\{0:-1\}
factor -> ( exp ) :\{1:-1\}
factor -> number :\{0:-1\}
factor -> identifier :\{0:-1\}
